name: Ghostty Ã— tmux Integration CI/CD

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly builds at 2 AM UTC
    - cron: '0 2 * * *'

env:
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1

jobs:
  # ============================================================================
  # Build libtmuxcore
  # ============================================================================
  build-libtmuxcore:
    name: Build libtmuxcore
    runs-on: macos-14  # ARM64 runners
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Cache Homebrew packages
      uses: actions/cache@v3
      with:
        path: |
          ~/Library/Caches/Homebrew
          /opt/homebrew
        key: ${{ runner.os }}-brew-${{ hashFiles('**/Brewfile') }}
        restore-keys: |
          ${{ runner.os }}-brew-
    
    - name: Install dependencies
      run: |
        brew install libevent ncurses utf8proc cmocka pkg-config
        brew install autoconf automake
    
    - name: Build tmux from source
      working-directory: tmux
      run: |
        sh autogen.sh
        ./configure --enable-utf8proc
        make -j$(sysctl -n hw.ncpu)
    
    - name: Build libtmuxcore
      working-directory: cache/week1/OPS-001/build
      run: |
        make clean
        make all
        make check
    
    - name: Run tests
      working-directory: cache/week1/OPS-001/build
      run: |
        make test
    
    - name: Upload library artifacts
      uses: actions/upload-artifact@v3
      with:
        name: libtmuxcore-macos-arm64
        path: |
          cache/week1/OPS-001/build/lib/*.a
          cache/week1/OPS-001/build/lib/*.dylib
          cache/week1/OPS-001/build/include/*.h

  # ============================================================================
  # Build Ghostty
  # ============================================================================
  build-ghostty:
    name: Build Ghostty
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: 0.14.1
    
    - name: Cache Zig dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/zig
          ghostty/zig-cache
          ghostty/.zig-cache
        key: ${{ runner.os }}-zig-${{ hashFiles('**/build.zig.zon') }}
        restore-keys: |
          ${{ runner.os }}-zig-
    
    - name: Build Ghostty
      working-directory: ghostty
      run: |
        zig build -Doptimize=ReleaseFast
    
    - name: Upload Ghostty artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ghostty-macos-arm64
        path: |
          ghostty/zig-out/bin/*
          ghostty/zig-out/lib/*

  # ============================================================================
  # Integration Tests
  # ============================================================================
  integration-test:
    name: Integration Tests
    runs-on: macos-14
    needs: [build-libtmuxcore, build-ghostty]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download libtmuxcore
      uses: actions/download-artifact@v3
      with:
        name: libtmuxcore-macos-arm64
        path: cache/week1/OPS-001/build
    
    - name: Download Ghostty
      uses: actions/download-artifact@v3
      with:
        name: ghostty-macos-arm64
        path: ghostty/zig-out
    
    - name: Install test dependencies
      run: |
        brew install cmocka valgrind
    
    - name: Run integration tests
      run: |
        # Integration test commands here
        echo "Running integration tests..."
        # make integration-test
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          test-results/*.xml
          coverage/*.html

  # ============================================================================
  # Code Quality Checks
  # ============================================================================
  code-quality:
    name: Code Quality
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install analysis tools
      run: |
        brew install clang-format cppcheck
        pip3 install cpplint
    
    - name: Check C code formatting
      run: |
        find . -name "*.c" -o -name "*.h" | xargs clang-format --dry-run --Werror
    
    - name: Run static analysis
      run: |
        cppcheck --enable=all --error-exitcode=1 \
          --suppress=missingIncludeSystem \
          --inline-suppr \
          tmux/*.c cache/week1/*/build/*.c
    
    - name: Run cpplint
      run: |
        cpplint --filter=-legal/copyright,-build/include_subdir \
          tmux/*.h cache/week1/*/build/*.h

  # ============================================================================
  # Documentation
  # ============================================================================
  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install documentation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz plantuml
    
    - name: Generate API documentation
      run: |
        doxygen Doxyfile || true
    
    - name: Generate PlantUML diagrams
      run: |
        for puml in docs/**/*.puml; do
          plantuml -tsvg "$puml" || true
        done
    
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: |
          docs/html/**
          docs/**/*.svg

  # ============================================================================
  # Performance Benchmarks
  # ============================================================================
  benchmark:
    name: Performance Benchmarks
    runs-on: macos-14
    needs: [build-libtmuxcore]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download libtmuxcore
      uses: actions/download-artifact@v3
      with:
        name: libtmuxcore-macos-arm64
        path: cache/week1/OPS-001/build
    
    - name: Run benchmarks
      run: |
        # Benchmark commands here
        echo "Running performance benchmarks..."
        # make benchmark
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: |
          benchmark-results/*.json
          benchmark-results/*.html

  # ============================================================================
  # Release
  # ============================================================================
  release:
    name: Create Release
    runs-on: macos-14
    needs: [integration-test, code-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create release bundle
      run: |
        mkdir -p release
        cp -r libtmuxcore-macos-arm64/* release/
        cp -r ghostty-macos-arm64/* release/
        tar -czf ghostty-tmux-integration-macos-arm64.tar.gz release/
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release ${{ github.run_number }}
        draft: false
        prerelease: false
        files: |
          ghostty-tmux-integration-macos-arm64.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # Notifications
  # ============================================================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [release]
    if: always()
    
    steps:
    - name: Send Slack notification
      if: env.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Build #${{ github.run_number }} ${{ job.status }}
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}