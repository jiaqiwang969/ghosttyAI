@startuml callback-sequences
!theme plain
title Callback Sequence Diagrams

skinparam defaultTextAlignment center
skinparam sequenceMessageAlign center

== Grid Update Sequence ==

participant "tmux Core" as TMux
participant "Screen Writer" as SWrite
participant "UI Backend" as UIBack
participant "Grid Aggregator" as GridAgg
participant "Callback Router" as Router
participant "Ghostty Bridge" as Bridge
participant "Terminal Buffer" as TBuf
participant "GPU Renderer" as GPU

TMux -> SWrite : screen_write_cell()
activate SWrite
SWrite -> SWrite : Update grid cell
SWrite -> UIBack : tty_write(tty_cmd_cell)
deactivate SWrite

activate UIBack
UIBack -> GridAgg : AddCell(x, y, cell)
deactivate UIBack

activate GridAgg
GridAgg -> GridAgg : Buffer updates
note right: Aggregate until\nflush or threshold

GridAgg -> GridAgg : CreateSpans()
GridAgg -> Router : on_grid_update(spans)
deactivate GridAgg

activate Router
Router -> Bridge : ProcessGridUpdate()
deactivate Router

activate Bridge
Bridge -> Bridge : ConvertCells()
Bridge -> TBuf : UpdateRegion()
deactivate Bridge

activate TBuf
TBuf -> TBuf : MarkDirty()
TBuf -> GPU : RequestRender()
deactivate TBuf

== Layout Change Sequence ==

participant "tmux Core" as TMux
participant "Layout Manager" as Layout
participant "UI Backend" as UIBack
participant "Callback Router" as Router
participant "Ghostty Bridge" as Bridge
participant "Split View" as Split

TMux -> Layout : layout_fix_panes()
activate Layout
Layout -> Layout : Calculate geometry
Layout -> UIBack : NotifyLayout()
deactivate Layout

activate UIBack
UIBack -> UIBack : BuildLayoutTree()
UIBack -> Router : on_layout_change(nodes)
deactivate UIBack

activate Router
Router -> Bridge : ProcessLayout()
deactivate Router

activate Bridge
Bridge -> Bridge : MapToSplitTree()
Bridge -> Split : UpdateSplits()
deactivate Bridge

activate Split
Split -> Split : Resize panes
Split -> Split : Redraw borders
deactivate Split

== Copy Mode Sequence ==

participant "User" as User
participant "Input Handler" as Input
participant "tmux Core" as TMux
participant "Copy Mode" as Copy
participant "UI Backend" as UIBack
participant "Callback Router" as Router
participant "Ghostty Bridge" as Bridge
participant "Selection UI" as Selection

User -> Input : Ctrl+B [
Input -> TMux : tmc_command("copy-mode")

activate TMux
TMux -> Copy : Enter copy mode
deactivate TMux

activate Copy
Copy -> Copy : Initialize state
Copy -> UIBack : NotifyCopyMode()
deactivate Copy

activate UIBack
UIBack -> UIBack : BuildCopyState()
UIBack -> Router : on_copy_mode(state)
deactivate UIBack

activate Router
Router -> Bridge : ProcessCopyMode()
deactivate Router

activate Bridge
Bridge -> Selection : SetSelection(region)
deactivate Bridge

activate Selection
Selection -> Selection : Highlight region
Selection -> Selection : Show cursor
deactivate Selection

== Process Exit Sequence ==

participant "Shell Process" as Shell
participant "PTY Manager" as PTY
participant "tmux Core" as TMux
participant "UI Backend" as UIBack
participant "Callback Router" as Router
participant "Ghostty Bridge" as Bridge
participant "Terminal UI" as UI

Shell -> Shell : exit(0)
Shell -> PTY : SIGCHLD

activate PTY
PTY -> TMux : ProcessExited(pid, status)
deactivate PTY

activate TMux
TMux -> TMux : CleanupPane()
TMux -> UIBack : NotifyExit()
deactivate TMux

activate UIBack
UIBack -> Router : on_process_exit(pane_id, status)
deactivate UIBack

activate Router
Router -> Bridge : HandleProcessExit()
deactivate Router

activate Bridge
Bridge -> UI : ShowExitMessage()
deactivate Bridge

activate UI
UI -> UI : Display "[Process exited]"
deactivate UI

note over GridAgg
  **Performance Note**
  Aggregates updates for
  16.67ms (60 FPS) before
  dispatching callback
end note

@enduml