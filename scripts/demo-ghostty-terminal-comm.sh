#!/bin/bash
# Ghostty终端间通信演示脚本

# 演示如何在Ghostty中实现类似tmux的终端间通信功能

echo "=== Ghostty Terminal Communication Demo ==="
echo ""
echo "这个演示展示了Ghostty如何实现终端间通信功能"
echo ""

# 场景1: 本地终端间通信
echo "📍 场景1: 本地终端间通信"
echo "========================================="
echo ""
echo "启动两个Ghostty终端："
echo "  Terminal A: ghostty --session-id terminal-a"
echo "  Terminal B: ghostty --session-id terminal-b"
echo ""
echo "在Terminal A中发送命令到Terminal B："
echo "  $ @send terminal-b 'echo \"Hello from Terminal A\"'"
echo "  或"
echo "  $ echo 'ls -la' | ghostty send terminal-b"
echo ""
echo "建立双向链接（所有输出同步）："
echo "  $ @link terminal-b"
echo ""

# 场景2: SSH远程通信
echo "📍 场景2: SSH远程通信"
echo "========================================="
echo ""
echo "本地终端连接到远程服务器："
echo "  $ ghostty --session-id local"
echo "  $ ssh user@remote-host"
echo ""
echo "远程终端自动注册（通过Shell Integration）："
echo "  remote$ # GHOSTTY_SESSION_ID已自动设置"
echo "  remote$ @register-remote local"
echo ""
echo "本地发送命令到远程："
echo "  local$ @send remote 'uname -a'"
echo ""
echo "远程发送结果回本地："
echo "  remote$ @send local 'Remote execution complete'"
echo ""

# 场景3: 实用案例
echo "📍 场景3: 实用案例"
echo "========================================="
echo ""
echo "1️⃣ 开发环境（编辑器+编译器+日志）："
echo "   editor$ @link compiler --on-save"
echo "   compiler$ @link logger"
echo "   # 保存文件时自动编译，结果显示在日志窗口"
echo ""
echo "2️⃣ 协作调试："
echo "   dev1$ @link dev2 --bidirectional"
echo "   # 两个开发者的终端完全同步"
echo ""
echo "3️⃣ 远程协助："
echo "   support$ ssh customer@remote"
echo "   support$ @link-back --view-only"
echo "   # 客户可以看到支持人员的操作"
echo ""

# 技术实现细节
echo "📍 技术实现"
echo "========================================="
echo ""
echo "架构层次："
echo "  App层 (SessionManager) ← 类似tmux server"
echo "    ↓"
echo "  Surface层 (终端实例)"
echo "    ↓"
echo "  Termio层 (PTY控制)"
echo ""
echo "通信机制："
echo "  • 本地: D-Bus IPC + 直接PTY写入"
echo "  • 远程: OSC 777序列 + Shell Integration"
echo ""
echo "关键代码路径："
echo "  1. App.zig → SessionManager"
echo "  2. Surface.zig → session_id + routing"
echo "  3. apprt/ipc.zig → send_to_session action"
echo "  4. termio/Termio.zig → backend.write()"
echo ""

# OSC序列协议
echo "📍 OSC 777通信协议"
echo "========================================="
echo ""
echo "建立通信通道："
echo '  ESC]777;ghostty-comm;setup;session-id\a'
echo ""
echo "发送数据："
echo '  ESC]777;ghostty-comm;data;target;base64-data\a'
echo ""
echo "注册远程："
echo '  ESC]777;ghostty-comm;register;local;remote\a'
echo ""

# 命令行接口
echo "📍 命令行接口"
echo "========================================="
echo ""
echo "外部命令："
echo "  ghostty send <session-id> <command>"
echo "  ghostty link <session-id> [--bidirectional]"
echo "  ghostty sessions"
echo "  ghostty unlink <session-id>"
echo ""
echo "内部命令（在终端内使用）："
echo "  @send <session-id> <command>"
echo "  @link <session-id>"
echo "  @unlink <session-id>"
echo "  @sessions"
echo "  @status"
echo ""

# 与tmux对比
echo "📍 与tmux对比"
echo "========================================="
echo ""
echo "优势："
echo "  ✅ 原生集成，无需额外进程"
echo "  ✅ 更好的性能（减少IPC开销）"
echo "  ✅ SSH透明支持"
echo "  ✅ 更简洁的命令"
echo "  ✅ 可视化会话管理"
echo ""
echo "相似功能："
echo "  • send-keys → @send"
echo "  • attach-session → @link"
echo "  • list-sessions → @sessions"
echo "  • new-session → ghostty --session-id"
echo ""

echo "=== Demo Complete ==="
echo ""
echo "这个功能完全可以在Ghostty中实现，"
echo "并且比tmux更加优雅和高效！"